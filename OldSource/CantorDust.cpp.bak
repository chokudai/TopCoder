using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class CantorDust {
    public int occurrencesNumber(string[] pattern, int time)
    {
        int i,j;
        string make = "X";
        string bold = ".";
        for (i = 0; i < time; i++)
        {
            make = make + bold + make;
            bold = bold + bold + bold;
        }
        int mark = -1;

        string search = "";
        string search2 = "";
        string newbold = "";

        for (i = 0; i < pattern[0].Length; i++) newbold += ".";

        search2 = newbold;

        for (i = 0; i < pattern.Length; i++)
        {
            if (pattern[i] == newbold)
            {
                search += ".";
            }
            else
            {
                if (mark != -1 && pattern[mark] != pattern[i]) return 0;
                search += "X";
                search2 = pattern[i];
                mark = i;
            }
        }
        if (mark != -1)
        {
            int a = numcount(make, search);
            int b = numcount(make, search2);
            return a * b;
        }
        else
        {
            int tate = pattern.Length - 1;
            int yoko = pattern[0].Length - 1;

            int tatenum = 0, yokonum = 0;

            for (i = 0; i< make.Length; i++)
            {
                int count = 0;
                for (j = i; ; j++)
                {
                    if (j >= make.Length || make[j] == 'X')
                    {
                        tatenum += Math.Max(0, count - tate);
                        yokonum += Math.Max(0, count - yoko);
                        i = j;
                        break;
                    }
                    else count++;
                }
            }
            int res = 0;
            res = tatenum * Math.Max(0, make.Length - yoko) + yokonum * Math.Max(0, make.Length - tate) - (tatenum * yokonum);
            return res;
        }
    }

    int numcount(string bs, string se)
    {
        int count = 0;
        int now = 0;
        int a;
        while (true)
        {
            a = bs.IndexOf(se, now);
            if (a < 0) return count;
            count++;
            now = a + 1;
        }
    }

}


// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]
// Powered by CodeProcessor


// Powered by FileEdit
// Powered by TZTester 1.01 [25-Feb-2003] [modified for C# by Petr]
// Powered by CodeProcessor
