using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class RabbitJumping {
public int getMinimum(int[] holes, int largeJump) {

}




// BEGIN CUT HERE
	public void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }
	private void verify_case(int Case, int Expected, int Received) {
		Console.Write("Test Case #" + Case + "...");
		if (Expected == Received) 
			Console.WriteLine("PASSED"); 
		else { 
			Console.WriteLine("FAILED"); 
			Console.WriteLine("\tExpected: \"" + Expected + '\"');
			Console.WriteLine("\tReceived: \"" + Received + '\"'); } }
	private void test_case_0() { int[] Arg0 = new int[]{ 1, 2 }; int Arg1 = 3; int Arg2 = 1; verify_case(0, Arg2, getMinimum(Arg0, Arg1)); }
	private void test_case_1() { int[] Arg0 = new int[]{ 1, 2 }; int Arg1 = 4; int Arg2 = -1; verify_case(1, Arg2, getMinimum(Arg0, Arg1)); }
	private void test_case_2() { int[] Arg0 = new int[]{ 2, 3 }; int Arg1 = 3; int Arg2 = 3; verify_case(2, Arg2, getMinimum(Arg0, Arg1)); }
	private void test_case_3() { int[] Arg0 = new int[]{ 2, 17, 21, 36, 40, 55, 59, 74 }; int Arg1 = 19; int Arg2 = 5; verify_case(3, Arg2, getMinimum(Arg0, Arg1)); }
	private void test_case_4() { int[] Arg0 = new int[]{ 187640193, 187640493, 187640738, 187640845, 564588641, 564588679, 
  564588696, 564588907, 605671187, 605671278, 605671288, 605671386, 
  755723729, 755723774, 755723880, 755723920, 795077469, 795077625, 
  795077851, 795078039, 945654724, 945654815, 945655107, 945655323 }
; int Arg1 = 475; int Arg2 = 9; verify_case(4, Arg2, getMinimum(Arg0, Arg1)); }

// END CUT HERE
// BEGIN CUT HERE
public static void Main() {
try {
RabbitJumping ___test = new RabbitJumping();
___test.run_test(-1);
} catch(Exception e) {
//Console.WriteLine(e.StackTrace);
Console.WriteLine(e.ToString());
}
}
// END CUT HERE
}
