using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class ProperDivisors {

    //static int MAX = 12000000;
    //int[] num = new int[MAX];
    //int[] num2 = new int[MAX];

    int[] ar = new int[10000];
    int[,] resar = new int[,]{
        {0,902687,1943739,3037088,4164374,5316967,6489599,7679013,8882760,10099054,11326509,12563876,13810330,15065217,16327756,17597479,18873813,20156426,21444936,22739007,24038432,25342628,26651774,27965444,29283328,30605515,31931666,33261670,34595343,35932595,37273396,38617411,39964694,41315119,42668506,44024836,45384078,46746087,48110842,49478131,50848230,52220529,53595280,54972537,56352137,57733969,59118040,60504174,61892508,63283036,64675475,66069864,67466380,68864678,70264943,71667073,73070971,74476601,75884012,77293305,78704195,80116677,81530841,82946593,84364044,85783015,87203417,88625412,90048878,91473890,92900267,94328035,95757245,97188002,98619865,100053194,101487956,102923900,104361196,105799837,107239829,108680805,110123121,111566641,113011307,114457330,115904424,117352666,118802158,120252797,121704471,123157117,124611185,126066115,127522134,128979323,130437464,131896637,133356983,134818201,136280575,137743845,139208002,140673290,142139558,143606640,145074823,146543968,148013898,149484964,150956745,152429429,153903166,155377711,156853115,158329434,159806631,161284743,162763600,164243302},
{0,946556,2031720,3169211,4340677,5537463,6754271,7987898,9235849,10496345,11768031,13049609,14340285,15639395,16946166,18260119,19580685,20907530,22240270,23578573,24922255,26270691,27624062,28981970,30344096,31710537,33080918,34455172,35833100,37214587,38599637,39987897,41379424,42774101,44171745,45572323,46975811,48382081,49791070,51202622,52616982,54033525,55452538,56874030,58297884,59723986,61152305,62582680,64015280,65450055,66886771,68325403,69766180,71208747,72653252,74099641,75547801,76997683,78449365,79902916,81358057,82814807,84273216,85733229,87194939,88658155,90122837,91589080,93056823,94526098,95996724,97468760,98942229,100417234,101893385,103370960,104849971,106330202,107811741,109294642,110778916,112264139,113750731,115238497,116727452,118217721,119709079,121201584,122695349,124190241,125686187,127183097,128681431,130180614,131680906,133182356,134684756,136188212,137692808,139198293,140704948,142212467,143720889,145230445,146740973,148252324,149764795,151278189,152792387,154307736,155823768,157340723,158858724,160377530,161897191,163417787,164939258,166461633,167984765,169508714},
{0,958501,2055626,3205089,4388518,5597270,6826054,8071647,9331570,10604038,11887689,13181237,14483888,15794974,17113708,18439636,19772173,21110984,22455702,23805977,25161626,26522035,27887378,29257270,30631361,32009768,33392126,34778345,36168244,37561708,38958731,40358963,41762462,43169108,44578720,45991281,47406736,48824979,50245940,51669466,53095795,54524317,55955292,57388772,58824588,60262663,61702959,63145300,64589874,66036624,67485306,68935913,70388668,71843207,73299676,74758043,76218173,77680026,79143682,80609206,82076317,83545043,85015426,86487412,87961096,89436283,90912938,92391154,93870863,95352121,96834715,98318721,99804166,101291145,102779263,104268811,105759799,107252001,108745514,110240390,111736628,113233827,114732392,116232138,117733056,119235296,120738634,122243108,123748841,125255720,126763631,128272521,129782824,131293977,132806238,134319661,135834033,137349462,138866032,140383493,141902117,143421614,144942004,146463540,147986040,149509362,151033803,152559166,154085331,155612659,157140670,158669596,160199568,161730354,163261981,164794551,166327995,167862342,169397445,170933368},
{0,963033,2064697,3218696,4406666,5619956,6853277,8103410,9367872,10644879,11933073,13231157,14538347,15853971,17177247,18507713,19844790,21188143,22537396,23892210,25252401,26617350,27987232,29361658,30740291,32123238,33510134,34900894,36295333,37693337,39094898,40499668,41907711,43318892,44733046,46150141,47570140,48992928,50418424,51846487,53277356,54710415,56145933,57583949,59024307,60466921,61911755,63358639,64807749,66259037,67712262,69167410,70624701,72083778,73544788,75007693,76472363,77938758,79406951,80877018,82348666,83821932,85296853,86773381,88251605,89731328,91212523,92695279,94179529,95665326,97152458,98641004,100130988,101622509,103115168,104609254,106104781,107601521,109099572,110598988,112099768,113601500,115104610,116608893,118114353,119621133,121129007,122638024,124148296,125659709,127172165,128685589,130200436,131716130,133232934,134750892,136269804,137789770,139310881,140832879,142356042,143880081,145405011,146931086,148458122,149985984,151514967,153044873,154575576,156107442,157639991,159173460,160707967,162243294,163779462,165316571,166854554,168393441,169933085,171473544},
{0,964986,2068611,3224565,4414496,5629745,6865022,8117113,9383534,10662499,11952653,13252693,14561843,15879425,17204659,18537084,19876119,21221430,22572641,23929414,25291566,26658470,28030310,29406696,30787286,32172194,33561050,34953766,36350164,37750125,39153644,40560373,41970372,43383514,44799629,46218680,47640635,49065380,50492838,51922861,53355688,54790705,56228181,57668154,59110471,60555045,62001837,63450680,64901748,66354993,67810179,69267281,70726534,72187567,73650538,75115403,76582028,78050384,79520535,80992557,82466168,83941389,85418269,86896754,88376936,89858621,91341772,92826489,94312698,95800452,97289543,98780046,100271987,101765466,103260085,104756131,106253617,107752314,109252326,110753698,112256437,113760127,115265195,116771437,118278857,119787594,121297427,122808403,124320633,125834004,127348419,128863797,130380603,131898255,133417020,134936936,136457806,137979732,139502801,141026758,142551883,144077877,145604765,147132798,148661795,150191614,151722556,153254421,154787082,156320905,157855415,159390838,160927304,162464590,164002718,165541785,167081728,168622573,170164174,171706593},
{0,965884,2070407,3227262,4418091,5634239,6870417,8123407,9390729,10670590,11961642,13262585,14572633,15891115,17217247,18550572,19890508,21236716,22588827,23946501,25309549,26677354,28050094,29427380,30808869,32194675,33584429,34978046,36375343,37776203,39180622,40588251,41999151,43413191,44830203,46250156,47673010,49098655,50527013,51957935,53391659,54827577,56265951,57706824,59150041,60595513,62043206,63492946,64944914,66399059,67855143,69313146,70773298,72235231,73699100,75164865,76632391,78101645,79572695,81045617,82520126,83996248,85474026,86953413,88434495,89917076,91401128,92886743,94373849,95862503,97352494,98843901,100336739,101831118,103326635,104823582,106321966,107821564,109322475,110824745,112328384,113832975,115338941,116846082,118354401,119864037,121374769,122886644,124399774,125914044,127429358,128945639,130463346,131981895,133501557,135022375,136544143,138066968,139590937,141115793,142641817,144168709,145696497,147225431,148755326,150286044,151817886,153350650,154884209,156418932,157954340,159490664,161028030,162566217,164105244,165645209,167186051,168727796,170270295,171813615},
{0,966311,2071260,3228544,4419798,5636373,6872979,8126396,9394144,10674434,11965913,13267284,14577758,15896667,17223227,18556979,19897341,21243977,22596515,23954616,25318091,26686323,28059491,29437204,30819120,32205353,33595535,34989579,36387303,37788591,39193437,40601493,42012820,43427288,44844726,46265106,47688387,49114459,50543244,51974593,53408744,54845090,56283892,57725193,59168835,60614736,62062855,63513022,64965418,66419992,67876502,69334932,70795510,72257871,73722168,75188358,76656312,78125994,79597471,81070819,82545755,84022305,85500511,86980323,88461833,89944843,91429322,92915362,94402897,95891978,97382397,98874228,100367495,101862301,103358245,104855618,106354431,107854455,109355794,110858491,112362556,113867575,115373968,116881537,118390282,119900346,121411505,122923808,124437364,125952062,127467803,128984512,130502644,132021623,133541711,135062955,136585151,138108405,139632801,141158084,142684534,144211855,145740069,147269429,148799753,150330899,151863166,153396359,154930346,156465495,158001331,159538082,161075876,162614489,164153942,165694336,167235604,168777776,170320702,171864449},
{0,966517,2071674,3229163,4420625,5637408,6874220,8127843,9395798,10676296,11967982,13269558,14580241,15899356,17226122,18560081,19900650,21247494,22600240,23958546,25322228,26690668,28064042,29441962,30824084,32210525,33600913,34995163,36393095,37794590,39199642,40607906,42019439,43434114,44851761,46272347,47695835,49122114,50551105,51982661,53417018,54853571,56292580,57734088,59177938,60624044,62072371,63522746,64975348,66430128,67886845,69345483,70806268,72268835,73733340,75199737,76667897,78137786,79609471,81083026,82558169,84034925,85513337,86993357,88475073,89958290,91442975,92929224,94416966,95906254,97396879,98888918,100382391,101877405,103373554,104871135,106370155,107870385,109371931,110874835,112379107,113884332,115390932,116898709,118407661,119917932,121429299,122941807,124455570,125970475,127486423,129003338,130521678,132040863,133561159,135082609,136605013,138128473,139653076,141178566,142705221,144232750,145761171,147290737,148821268,150352621,151885095,153418495,154952689,156488045,158024088,159561046,161099046,162637865,164177526,165718127,167259603,168801982,170345115,171889068},
{0,966619,2071876,3229467,4421031,5637914,6874828,8128553,9396609,10677208,11968996,13270672,14581456,15900673,17227541,18561601,19902271,21249217,22602064,23960471,25324256,26692797,28066271,29444293,30826517,32213059,33603548,34997901,36395933,37797530,39202684,40611048,42022682,43437459,44855206,46275894,47699484,49125864,50554957,51986614,53421074,54857728,56296838,57738447,59182398,60628606,62077034,63527510,64980213,66435095,67891915,69350653,70811539,72274208,73738813,75205311,76673574,78143563,79615350,81089008,82564251,84041109,85519623,86999744,88481561,89964879,91449666,92936016,94423859,95913249,97403975,98896116,100389690,101884805,103381055,104878737,106377859,107878191,109379837,110882845,112387217,113892543,115399246,116907123,118416176,119926549,121438016,122950627,124464491,125979497,127495547,129012563,130531005,132050291,133570688,135092239,136614744,138138306,139663010,141188601,142715359,144242989,145771512,147301180,148831811,150363266,151895841,153429341,154963638,156499095,158035238,159572299,161110400,162649321,164189083,165729785,167271362,168813842,170357078,171901132}
    };


    bool isPrime(int a)
    {
        int i;
        if (a <= 1) return false;
        for (i = 2; i * i <= a; i++) if (a % i == 0) return false;
        return true;
    }

    public int analyzeInterval(int a, int b, int n)
    {
        int i;
        long res = 0;
        int count = 0;
        for (i = 2; i < 10000; i++)
        {
            if (isPrime(i)) ar[count++] = i;
        }
        res += resar[n - 2, (a + b) / 100000];
        for (i = a + b - (a + b) % 100000; i <= a + b; i++)
        {
            res += getnum(i, n);
        }
        res -= resar[n - 2, (a - 1) / 100000];
        for (i = (a - 1) - (a - 1) % 100000; i <= a - 1; i++)
        {
            res -= getnum(i, n);
        }
        return (int)res;
    }

    
    long getnum(int a, int n)
    {
        int i,j;
        long plus = 1;
        long minus = 1;
        if (a <= 1) return 0;
        for (int ii = 0; ar[ii] * ar[ii] <= a; ii++)
        {
            i = ar[ii];
            if (a % i == 0)
            {
                int b = 0;
                do
                {
                    b++;
                    a /= i;
                } while (a % i == 0);
                long plusmul = b;
                long minusmul = b / n;
                plus *= plusmul + 1;
                minus *= minusmul + 1;
            }
        }
        if (a != 1) plus *= 2;
        return plus - minus - 1;
    }
    


    // BEGIN CUT HERE
    public void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); }
	private void verify_case(int Case, int Expected, int Received) {
		Console.Write("Test Case #" + Case + "...");
		if (Expected == Received) 
			Console.WriteLine("PASSED"); 
		else { 
			Console.WriteLine("FAILED"); 
			Console.WriteLine("\tExpected: \"" + Expected + '\"');
			Console.WriteLine("\tReceived: \"" + Received + '\"'); } }
	private void test_case_0() { int Arg0 = 32; int Arg1 = 1; int Arg2 = 3; int Arg3 = 5; verify_case(0, Arg3, analyzeInterval(Arg0, Arg1, Arg2)); }
	private void test_case_1() { int Arg0 = 1; int Arg1 = 12; int Arg2 = 2; int Arg3 = 8; verify_case(1, Arg3, analyzeInterval(Arg0, Arg1, Arg2)); }
	private void test_case_2() { int Arg0 = 1000000; int Arg1 = 10000000; int Arg2 = 10; int Arg3 = 146066338; verify_case(2, Arg3, analyzeInterval(Arg0, Arg1, Arg2)); }

// END CUT HERE
// BEGIN CUT HERE
public static void Main() {
try {
ProperDivisors ___test = new ProperDivisors();
___test.run_test(-1);
} catch(Exception e) {
//Console.WriteLine(e.StackTrace);
Console.WriteLine(e.ToString());
}
}
// END CUT HERE
}
