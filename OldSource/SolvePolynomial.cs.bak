using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class SolvePolynomial {
public int[] integerRoots(int[] X, int[] Y, int n) {

}




// BEGIN CUT HERE
	public void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }
	private void verify_case(int Case, int[] Expected, int[] Received) {
		Console.Write("Test Case #" + Case + "...");
		if (equal_arrays(Expected, Received)) 
			Console.WriteLine("PASSED"); 
		else { 
			Console.WriteLine("FAILED"); 
			Console.WriteLine("\tExpected: " + print_array(Expected)); 
			Console.WriteLine("\tReceived: " + print_array(Received)); } }
	string print_array(int[] V) {
		System.Text.StringBuilder builder = new System.Text.StringBuilder();
		builder.Append("{ ");
		foreach (int o in V) {
			builder.Append('\"');
			builder.Append(o.ToString());
			builder.Append("\",");
		}
		builder.Append(" }");
		return builder.ToString();
	}
	bool equal_arrays(int[] a, int[]b) {
		if (a.Length != b.Length) return false;
		for (int i = 0; i < a.Length; ++i) if (a[i] != b[i]) return false;
		return true;
	}
	private void test_case_0() { int[] Arg0 = new int[]{-4, 2, 2}; int[] Arg1 = new int[]{0}; int Arg2 = 2; int[] Arg3 = new int[]{-2, 1 }; verify_case(0, Arg3, integerRoots(Arg0, Arg1, Arg2)); }
	private void test_case_1() { int[] Arg0 = new int[]{1, 2, 0}; int[] Arg1 = new int[]{2, 0, 0, 0}; int Arg2 = 3; int[] Arg3 = new int[]{-1 }; verify_case(1, Arg3, integerRoots(Arg0, Arg1, Arg2)); }
	private void test_case_2() { int[] Arg0 = new int[]{1, 4, 4}; int[] Arg1 = new int[]{0}; int Arg2 = 2; int[] Arg3 = new int[]{ }; verify_case(2, Arg3, integerRoots(Arg0, Arg1, Arg2)); }
	private void test_case_3() { int[] Arg0 = new int[]{-15, -10, 2, 1}; int[] Arg1 = new int[]{0}; int Arg2 = 3; int[] Arg3 = new int[]{3 }; verify_case(3, Arg3, integerRoots(Arg0, Arg1, Arg2)); }
	private void test_case_4() { int[] Arg0 = new int[]{735134400, 1383, 4121, 18875, 10463, 
 13512, 19603, 28679, 13483, 9509, 1701,
 13383, 24425, 7923, 7978, 21702, 30989,
 20676, 18547, 28130, 10944}; int[] Arg1 = new int[]{34,23,6,5,3,5,4,34,37,5,6,21,17,9}; int Arg2 = 10000; int[] Arg3 = new int[]{ }; verify_case(4, Arg3, integerRoots(Arg0, Arg1, Arg2)); }

// END CUT HERE
// BEGIN CUT HERE
public static void Main() {
try {
SolvePolynomial ___test = new SolvePolynomial();
___test.run_test(-1);
} catch(Exception e) {
//Console.WriteLine(e.StackTrace);
Console.WriteLine(e.ToString());
}
}
// END CUT HERE
}
